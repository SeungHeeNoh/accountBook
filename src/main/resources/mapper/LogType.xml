<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sweethome.accountbook.mapper.LogTypeMapper">
    <sql id="logTypeColumn">
        logType.type_id,
        logType.type_name,
        logType.transaction_type,
        logType.description,
        (select type_name from log_type where type_id = logType.parent_type_id) parentTypeName,
        logType.created_at,
        logType.created_by,
        logType.modified_at,
        logType.modified_by
    </sql>
    <select id="findByParam" parameterType="com.sweethome.accountbook.domain.LogType" resultType="com.sweethome.accountbook.dto.LogTypeDto">
        SELECT
            <include refid="logTypeColumn" />
        FROM log_type logType
        <where>
            <if test="typeId != null">
                and type_id = #{typeId}
            </if>
            <if test="typeName != null">
                and type_name = #{typeName}
            </if>
            <if test="transactionType != null and transactionType.title != 'ALL'">
                and transaction_type = #{transactionType}
            </if>
            <if test="description != null">
                and description like concat('%', #{description}, '%')
            </if>
            <if test="auditInfo != null and auditInfo.createdBy != null">
                and created_by like concat('%', #{auditInfo.createdBy}, '%')
            </if>
            <if test="auditInfo != null and auditInfo.modifiedBy != null">
                and modified_by like concat('%', #{auditInfo.modifiedBy}, '%')
            </if>
            <if test="parentTypeId != null">
                and parent_type_id = #{parentTypeId}
            </if>
            and log_group_id = #{userGroup.groupSeq}
        </where>
        ORDER BY created_at desc;
    </select>
    <select id="getDuplicateTypeNameCount" parameterType="com.sweethome.accountbook.domain.LogType" resultType="_int">
        SELECT COUNT(1)
        FROM log_type
        WHERE type_name = #{typeName}
        AND log_group_id = #{userGroup.groupSeq}
    </select>
    <insert id="insert" parameterType="com.sweethome.accountbook.domain.LogType">
        INSERT INTO log_type(type_name, transaction_type, description, created_at, created_by, parent_type_id, log_group_id)
        VALUES (#{typeName}, #{transactionType}, #{description}, NOW(), #{auditInfo.createdBy}, #{parentTypeId}, #{userGroup.groupSeq});
    </insert>
    <select id="findByTypeId" parameterType="com.sweethome.accountbook.domain.LogType" resultType="com.sweethome.accountbook.dto.LogTypeDto">
        SELECT
            <include refid="logTypeColumn" />
        FROM log_type logType
        <where>
            and type_id = #{typeId}
            and log_group_id = #{userGroup.groupSeq}
        </where>
        ORDER BY created_at desc;
    </select>
    <update id="update" parameterType="com.sweethome.accountbook.domain.LogType">
        UPDATE log_type
        <set>
        <if test="typeName != null">
            type_name = #{typeName},
        </if>
        <if test="transactionType != null and transactionType.title != 'ALL'">
            transaction_type = #{transactionType},
        </if>
        <if test="description != null">
            description = #{description},
        </if>
            modified_at = NOW(),
            modified_by = #{auditInfo.modifiedBy}
        </set>
        WHERE type_id = #{typeId}
          and log_group_id = #{userGroup.groupSeq}
    </update>
    <delete id="delete" parameterType="com.sweethome.accountbook.dto.DeleteLogTypeDto">
        DELETE FROM log_type
        WHERE type_id in
              <foreach collection="typeIds" separator="," item="typeId" open="(" close=")">
                  #{typeId}
              </foreach>
          and log_group_id = #{groupSeq}
    </delete>
    <select id="findByParentTypeId" parameterType="com.sweethome.accountbook.domain.LogType" resultType="com.sweethome.accountbook.dto.LogTypeDto">
        SELECT
            <include refid="logTypeColumn" />
        FROM log_type logType
        <where>
            and parent_type_id = #{parentTypeId}
            and log_group_id = #{userGroup.groupSeq}
            and logType.parent_type_id != logType.type_id
        </where>
        ORDER BY created_at desc;
    </select>
</mapper>